# Syed Faysel Ahammad Rajo
# Student ID: 21101078
# Lab04: DHDLC

class Node:
  def __init__(self, e=None, n=None, p=None):
    self.element = e
    self.next = n
    self.prev = p


class DoublyList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array.
    self.head = Node()
    # To Do
    if (type(a) == Node):
        self.head.next = a

    else:
        # self.head.next = self.head.prev
        # self.head.prev = self.head

        tail = Node(a[0])
        self.head.next = tail
        tail.next = self.head #became circular
        self.head.prev = tail #became doubly linkd 
        tail.prev = self.head

        # since first node already created
        for i in range(1,len(a)):

            new = Node(a[i])
            tail.next = new
            new.prev = tail
            tail = tail.next # update tail

        # outside the loop, connect tail and head (make circular)
        tail.next = self.head
        self.head.prev = tail

    
  # Counts the number of Nodes in the list
  def countNode(self):
    # To Do
    count = 0 
    current = self.head.next 
    while(current!=self.head):
        count+=1
        current = current.next

    return count
  
  # prints the elements in the list
  def forwardprint(self):
    # To Do
    current = self.head.next
    while(current != self.head):
        # printing style
        if (current.next ==self.head):
            print(current.element)
        else:
            print(current.element, end =",")
        current = current.next

  # prints the elements in the list backward
  def backwardprint(self):
    # To Do
    current = self.head.prev
    while(current!= self.head):
        # printing style
        if (current.prev ==self.head):
            print(current.element)
        else:
            print(current.element, end =",")
        
        current = current.prev

  # returns the reference of the at the given index. For invalid index return None.
  def nodeAt(self, idx):
    # To Do
    index = 0
    current = self.head.next

    if (idx<0 or idx>=self.countNode()):
        return None

    while(current!=self.head):
        if(index == idx):
            return current
        else:
            index +=1
        current = current.next
  
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    # To Do
    index = 0
    current = self.head.next
    while(current!=self.head):
        
        if (current.element == elem):
            return index
        else:
            index+=1
        
        current = current.next
    return -1

  # inserts containing the given element at the given index Check validity of index. 
  def insert(self, elem, idx):
    # To Do
    if (idx<0 or idx>self.countNode()):
        return None
    
    # if index is valid
    else:
        newNode = Node(elem)
        
        if (idx==self.countNode()):
            q = self.head
        else:
            q = self.nodeAt(idx)

        pred = q.prev

        newNode.next = q
        q.prev = newNode
        newNode.prev = pred
        pred.next = newNode



  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
  def remove(self, idx):
    # To Do
    if (idx<0 or idx>=self.countNode()):
        return None

    removed = (self.nodeAt(idx))
    removed.prev.next = removed.next
    removed.next.prev = removed.prev

    removed = str(removed.element)

    return removed


# ============== Tester Code ======================


print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40. 
h1.backwardprint() # This should print: 40,30,20,10. 
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that 
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.  

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40. 
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.  
h2.backwardprint() # This should print: 40,30,95,20,10,80.  

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.  
h3.backwardprint() # This should print: 70,60,50,40,30,20.  
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.  
h3.backwardprint() # This should print: 70,60,40,30,20.  
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60. 
h3.backwardprint() # This should print: 60,40,30,20.